"""
Django settings for lcd-bar project.

Generated by 'django-admin startproject' using Django 1.9.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
from datetime import timedelta

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ['DEBUG'] == 'True'

ALLOWED_HOSTS = [os.environ['ALLOWED_HOSTS']]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'lcdbar.api',
    'django_nose',
    'graphene_django'
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware'
]

ROOT_URLCONF = 'lcdbar.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'lcdbar.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ['DATABASE_NAME'],
        'USER': os.environ['DATABASE_USER'],
        'PASSWORD': os.environ['DATABASE_PASSWORD'],
        'HOST': os.environ['DATABASE_HOST'],
        'PORT': os.environ['DATABASE_PORT'],
    }
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'api_cache_table',
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'pt-PT'

TIME_ZONE = 'Europe/Lisbon'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_ROOT = '/var/www/lcdbar/api/static/'
STATIC_URL = '/static/'

# REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': ('rest_framework.permissions.IsAdminUser',),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
    ),
    'DEFAULT_FILTER_BACKENDS': ('rest_framework.filters.DjangoFilterBackend',
                                'rest_framework.filters.SearchFilter',
                                'rest_framework.filters.OrderingFilter'),
    'PAGE_SIZE': 25,
    'NUM_PROXIES': 2,
    'DEFAULT_THROTTLE_CLASSES': (
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ),
    'DEFAULT_THROTTLE_RATES': {
        'anon': os.environ['default_throttle_rate_anon'],
        'user': os.environ['default_throttle_rate_user']
    }
}

GRAPHENE = {
    'SCHEMA': 'lcdbar.schema.schema'
}

# Django Cors Headers Configuration
CORS_ORIGIN_ALLOW_ALL = os.environ['CORS_ORIGIN_ALLOW_ALL'] == 'True'
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_WHITELIST = os.environ['CORS_ORIGIN_WHITELIST']

# REST Framework JWT Configuration
JWT_AUTH = {
    'JWT_AUTH_HEADER_PREFIX': 'Bearer',
    'JWT_ALLOW_REFRESH': True,
    'JWT_EXPIRATION_DELTA': timedelta(days=90),
    'JWT_REFRESH_EXPIRATION_DELTA': timedelta(days=365)
}

# Logging Settings
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
    },
    'handlers': {
        'lcdbar.api.file.handler': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': 'logs/lcdbar.log',
            'formatter': 'verbose'
        },
    },
    'loggers': {
        'lcdbar.api': {
            'handlers': ['lcdbar.api.file.handler'],
            'propagate': True,
            'level': 'WARNING',
        },
    }
}

TEST_RUNNER = 'django_nose.NoseTestSuiteRunner'

NOSE_ARGS = [
    '--with-coverage',
    '--cover-package=lcdbar.api',
    '--cover-html',
    '--cover-erase',
    '--cover-branches',
    '--verbosity=3',
]


# CUSTOM

# Uncomment this if you use a custom auth model for authentication
# AUTH_USER_MODEL = 'api.User'

# Uncomment if you user plugs_media
## Media settings
#MEDIA_ROOT = STATIC_ROOT + 'media/'
#MEDIA_URL = STATIC_URL + 'media/'

# # Plugs Media
# PLUGS_MEDIA = {
#     'CONTENT_TYPES': ['image/png', 'image/jpeg', 'image/gif', 'application/pdf'],
#     'MAX_FILE_SIZE': 2000000,
#     'DEFAULTS': {
#         #Change this according to the user avatar image file
#         'USER_AVATAR': 'default/user_avatar_740x781.png'
#     }
# }

# Uncomment if you use plugs_mail
# # Email Setings
# EMAIL_BACKEND = "post_office.EmailBackend"
# EMAIL_SEND_EMAILS = os.environ['EMAIL_SEND_EMAILS'] == 'True'
# EMAIL_USE_TLS = True
# EMAIL_HOST = os.environ['EMAIL_HOST']
# EMAIL_PORT = os.environ['EMAIL_PORT']
# EMAIL_HOST_USER = os.environ['EMAIL_HOST_USER']
# EMAIL_HOST_PASSWORD = os.environ['EMAIL_HOST_PASSWORD']
# DEFAULT_FROM_EMAIL = os.environ['DEFAULT_FROM_EMAIL']
#
# # Plugs Mail Settings
# PLUGS_MAIL = {
#     'SEND_EMAILS': True
# }

# Uncomment if you use plugs_auth
# PLUGS_AUTH = {
#     'ACTIVATE_VIEW': os.environ['SITE_ACTIVATE_VIEW'],
#     'RESET_VIEW': os.environ['SITE_RESET_VIEW']
# }
